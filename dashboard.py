import streamlit as st
import pandas as pd
import plotly.express as px
import pymongo
from datetime import datetime
from dateutil import parser
from streamlit_option_menu import option_menu
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import IsolationForest
from sklearn.preprocessing import StandardScaler
from statsmodels.tsa.holtwinters import ExponentialSmoothing
import plotly.graph_objects as go
import geopy
from geopy.geocoders import Nominatim
import numpy as np
 


# Set page configuration
st.set_page_config(page_title="Dashboard : Analyse Culturelle et √âconomique", page_icon="üìä", layout="wide")


# MongoDB connection setup
@st.cache_resource
def connect_to_mongo():
    client = pymongo.MongoClient("mongodb+srv://user:user@cluster0.1lwk5.mongodb.net/")  # Update with your connection string
    db = client["Dashboard_Data_Science"]
    return db

db = connect_to_mongo()

# Load data from MongoDB
@st.cache_data
def load_data():
    event = pd.DataFrame(list(db["event"].find()))
    football = pd.DataFrame(list(db["football"].find()))
    economy = pd.DataFrame(list(db["economic_data"].find()))
    
    # Rename 'dates' column to 'date'
    event = event.rename(columns={"dates": "date"})
    football = football.rename(columns={"dates": "date"})
    economy = economy.rename(columns={"dates": "date"})
    
    return event, football, economy

event, football, economy = load_data()


# Personnalisation du sidebar
with st.sidebar:
    section = option_menu(
        menu_title="Tableau de bord",  # Titre du menu
        options=["Rapport", "Accueil", "√âv√©nements culturels", "Donn√©es sportives", "Indicateurs √©conomiques", "Analyse avanc√©e"],  # Section
        icons=["file", "house", "headphones", "trophy", "bar-chart", "graph-up"],  # Ic√¥nes correspondantes
        menu_icon="list",  # Ic√¥ne pour le menu global
        default_index=0,  # Section par d√©faut
        styles={
            "container": {"padding": "5px", "background-color": "#2E2E2E", "height": "100vh", "display": "flex", "flex-direction": "column", "justify-content": "center"},
            "icon": {"color": "blue", "font-size": "18px"},  # Couleur et taille des ic√¥nes
            "nav-link": {"font-size": "16px", "text-align": "left", "margin": "0px", "--hover-color": "#eee"},
            "nav-link-selected": {"background-color": "#02ab21"},  # Couleur de s√©lection
        },
    )


# Homepage
# Sections
if section == "Rapport":
    st.title("üìä Rapport du Projet ")
    st.markdown("###  Analyse et Visualisation des Donn√©es Multi-Sectorielles : √âv√©nements, Sports et √âconomie")

    # Fournir le chemin ou le lien vers le fichier Markdown
    markdown_file_path = "README.md"  

    try:
        # Lire et afficher le contenu du fichier Markdown
        with open(markdown_file_path, "r", encoding="utf-8") as file:
            markdown_content = file.read()
        st.markdown(markdown_content)
    except FileNotFoundError:
        st.error("Le fichier Markdown sp√©cifi√© n'a pas √©t√© trouv√©.")
    except Exception as e:
        st.error(f"Une erreur s'est produite lors du chargement du fichier Markdown : {e}")


# Streamlit UI

if section=="Accueil":
    st.title("üè† Accueil")
    st.write("Bienvenue sur le tableau de bord int√©gr√©.")

    # Afficher les m√©triques
    col1, col2, col3 = st.columns(3)
    col1.metric("√âv√©nements culturels", len(event))
    col2.metric("Matches sportifs", len(football))
    col3.metric("Donn√©es √©conomiques", len(economy))

    # Conversion en DataFrame
    event_df = pd.DataFrame(event)
    football_df = pd.DataFrame(football)
    economy_df = pd.DataFrame(economy)

    # ---------------------------------------------------------------------------------------------------
    # Affichage par tableaux avec filtres et m√©triques
    st.title("Tableaux des donn√©es")

    # Affichage des donn√©es des √©v√©nements
    st.subheader("√âv√©nements culturels")
    st.dataframe(event_df)

    # Affichage des donn√©es des matchs
    st.subheader("Matches sportifs")
    st.dataframe(football_df)

    # Affichage des donn√©es √©conomiques
    st.subheader("Donn√©es √©conomiques")
    st.dataframe(economy_df)

    # ---------------------------------------------------------------------------------------------------
    # Graphiques interactifs pour visualiser les tendances
    st.title("Graphiques interactifs")

    # Conversion de la colonne '_id' en cha√Ænes de caract√®res pour √©viter les erreurs de s√©rialisation
    event_df['_id'] = event_df['_id'].astype(str)
    football_df['_id'] = football_df['_id'].astype(str)
    economy_df['_id'] = economy_df['_id'].astype(str)

    # Graphique des √©v√©nements par pays
    event_count_by_country = event_df.groupby('country').size().reset_index(name='event_count')
    fig_event = px.bar(event_count_by_country, x='country', y='event_count', title='√âv√©nements culturels par pays')
    st.plotly_chart(fig_event)

    # Graphique des matchs par pays
    fig_football = px.bar(football_df, x='home_team', y='score_home_team', title='Scores des matchs par √©quipe √† domicile')
    st.plotly_chart(fig_football)

    # Graphique des donn√©es √©conomiques
    fig_economy = px.line(economy_df, x='country', y='value', title='Indicateurs √©conomiques par pays')
    st.plotly_chart(fig_economy)
 
 

# Cultural Events Section
if section == "√âv√©nements culturels":
    st.title("üé´ √âv√©nements culturels")
    st.write("Analyse des √©v√©nements.")

    st.markdown("### Analyse des √©v√©nements")
    
    if not event.empty:
        # Analyse g√©ographique
        fig_event_city = px.histogram(event, x="city", color="country", title="Nombre d'√©v√©nements par ville")
        st.plotly_chart(fig_event_city)
        

         # 'classificationName' pour l'analyse des types d'√©v√©nements
        fig_event_type = px.histogram(event, x="classificationName", title="R√©partition des types d'√©v√©nements")
        st.plotly_chart(fig_event_type)
        
        
        # Analyse des lieux
        fig_event_venue = px.histogram(event, x="venue", title="Nombre d'√©v√©nements par lieu")
        st.plotly_chart(fig_event_venue)

# Sports Data Section
elif section == "Donn√©es sportives":
    st.title("üèÜ Donn√©es sportives")
    st.write("Analyse des performances sportives.")
    # Ajouter les graphiques et visualisations pour les donn√©es sportives ici.

    st.markdown("### Performances des √©quipes")
    if not football.empty:
        football["date"] = pd.to_datetime(football["date"])
        
        # Tendance des performances sportives
        fig_scores = px.line(
            football, x="date", y="status", color="competition",
            title="Tendance des performances sportives"
        )
        st.plotly_chart(fig_scores)
        

    st.markdown("### Comparaison des comp√©titions")
    fig_competitions = px.bar(
        football, x="competition", color="competition",
        title="Nombre de matches par comp√©tition"
    )
    st.plotly_chart(fig_competitions)

    st.markdown("### Analyse des Scores")
    # Moyenne des Buts Marqu√©s/Conc√©d√©s
    football["goals"] = football["score_home_team"] + football["score_away_team"]
    avg_goals = football.groupby("competition")["goals"].mean().reset_index()
    fig_avg_goals = px.bar(
        avg_goals, x="competition", y="goals",
        title="Moyenne des Buts Marqu√©s par Comp√©tition",
        labels={"goals": "Moyenne des Buts"}
    )
    st.plotly_chart(fig_avg_goals)
    
    # Distribution des Scores
    fig_score_dist = px.histogram(
        football, x="goals",
        title="Distribution des Scores",
        labels={"goals": "Nombre de Buts"}
    )
    st.plotly_chart(fig_score_dist)

    st.markdown("### Analyse des Tendances Temporelles")
    # Performance au Fil du Temps
    fig_time_performance = px.line(
        football, x="date", y="score_home_team",
        title="Performance des √âquipes au Fil du Temps",
        labels={"score_home_team": "Score √† Domicile"}
    )
    st.plotly_chart(fig_time_performance)

   

    st.markdown("### Analyse des Joueurs")
    # Statistiques des Joueurs Cl√©s
    player_stats = football.groupby("home_team")[["score_home_team", "score_away_team"]].sum().reset_index()
    fig_player_stats = px.bar(
        player_stats, x="home_team", y=["score_home_team", "score_away_team"],
        title="Statistiques des Joueurs Cl√©s",
        labels={"value": "Nombre de Buts", "home_team": "√âquipe"}
    )
    st.plotly_chart(fig_player_stats)

# Economic Indicators Section
elif section == "Indicateurs √©conomiques":
    st.title("üìä Indicateurs √©conomiques")
    st.write("Analyse des donn√©es √©conomiques.")
    
    # Analyse Temporelle
    st.markdown("### Analyse Temporelle")
    if not economy.empty:
        economy["date"] = pd.to_datetime(economy["date"])
        fig_economy = px.line(
            economy, x="date", y="value", color="indicator",
            title="√âvolution des indicateurs √©conomiques"
        )
        st.plotly_chart(fig_economy)

    # Distribution des Indicateurs
    st.markdown("### Distribution des indicateurs")
    fig_dist = px.box(economy, x="indicator", y="value", color="indicator", 
                      title="Distribution des valeurs par indicateur")
    st.plotly_chart(fig_dist)

    # Analyse de la Croissance √âconomique
    st.markdown("### Croissance √âconomique Ann√©e par Ann√©e")
    economy["year"] = economy["date"].dt.year
    economy_grouped = economy.groupby(["year", "indicator"]).agg({"value": "sum"}).reset_index()
    economy_grouped["growth"] = economy_grouped.groupby("indicator")["value"].pct_change() * 100
    
    fig_growth = px.line(
        economy_grouped, x="year", y="growth", color="indicator", 
        title="Croissance √©conomique annuelle"
    )
    st.plotly_chart(fig_growth)

    # Corr√©lation entre diff√©rents indicateurs √©conomiques
    df = pd.DataFrame(economy)
    df['date'] = pd.to_datetime(df['date'], format='%Y').dt.year
    df_pivot = df.pivot_table(index='country', columns='date', values='value', aggfunc='first')
    corr_matrix = df_pivot.corr()

    st.markdown("### Corr√©lation entre les PIB des pays")
    fig_corr = go.Figure(data=go.Heatmap(
        z=corr_matrix.values,
        x=corr_matrix.columns,
        y=corr_matrix.index,
        colorscale='Viridis',
        colorbar=dict(title='Corr√©lation')
    ))

    fig_corr.update_layout(title="Matrice de Corr√©lation entre les PIB des pays en 2022")
    st.plotly_chart(fig_corr)

    # D√©tection des anomalies √©conomiques (Isolation Forest)
    economy_pib = economy[economy['indicator'] == 'GDP (current US$)']

    # Normalisation des valeurs pour √©viter que certaines valeurs ne dominent l'algorithme
    economy_scaled = economy_pib.copy()
    economy_scaled["value"] = StandardScaler().fit_transform(economy_scaled[["value"]])

    # Application de l'algorithme Isolation Forest pour d√©tecter les anomalies
    isolation_forest = IsolationForest(contamination=0.05)  # Le taux d'anomalie (ici 5%)
    economy_scaled["anomaly"] = isolation_forest.fit_predict(economy_scaled[["value"]])

    # Visualisation des anomalies sur un graphique
    fig_anomalies = px.scatter(
        economy_scaled, 
        x="date", 
        y="value", 
        color="anomaly", 
        title="D√©tection des anomalies √©conomiques (PIB)",
        labels={"anomaly": "Anomalie", "value": "PIB (en dollars US)"},
        color_continuous_scale='Viridis'
    )

    # Affichage du graphique dans Streamlit
    st.plotly_chart(fig_anomalies)

    # Pr√©vision du PIB Futur (mod√®le ARIMA ou Holt-Winters)
    st.markdown("### Pr√©vision des tendances √©conomiques futures")
    economy_pib = economy[economy["indicator"] == "GDP (current US$)"]
    economy_pib = economy_pib[["date", "value"]].set_index("date")
    economy_pib = economy_pib.resample('A').sum()  # Agr√©gation par ann√©e

    model = ExponentialSmoothing(economy_pib["value"], trend="add", seasonal=None, damped_trend=True)
    model_fit = model.fit()
    forecast = model_fit.forecast(steps=5)  # Pr√©vision pour les 5 prochaines ann√©es

    fig_forecast = go.Figure()
    fig_forecast.add_trace(go.Scatter(x=economy_pib.index, y=economy_pib["value"], mode='lines', name='Historique'))
    fig_forecast.add_trace(go.Scatter(x=forecast.index, y=forecast.values, mode='lines', name='Pr√©vision', line=dict(dash='dot')))
    
    fig_forecast.update_layout(title="Pr√©vision du PIB Futur (avec Holt-Winters)", xaxis_title="Ann√©e", yaxis_title="Valeur du PIB")
    st.plotly_chart(fig_forecast)

    # Analyse de la Variabilit√© des Indicateurs (Standard Deviation)
    economy_std_by_country = economy.groupby("country")["value"].std().reset_index()
    # Trier les pays en fonction de leur √©cart-type (de la plus grande variabilit√© √† la plus petite)
    economy_std_by_country = economy_std_by_country.sort_values("value", ascending=False)

    # Affichage de la variabilit√© des PIB par pays
    st.markdown("### Variabilit√© des PIB par pays")
    fig_std = px.bar(economy_std_by_country, 
                    x="country", 
                    y="value", 
                    title="Variabilit√© des PIB des pays (√©cart-type) par pays",
                    labels={"value": "√âcart-type du PIB (US$)", "country": "Pays"})

    st.plotly_chart(fig_std)
    
    
# Analyse Avanc√©e 
elif section == "Analyse avanc√©e":
    st.title("üîç Analyse avanc√©e")
    st.write("Analyse approfondie des donn√©es.")

    # ---------------------------- S√©lection de l'option d'analyse ----------------------------
    option = st.selectbox(
        "Choisissez l'analyse √† afficher:",
        options=["√âconomie vs √âv√©nements", "√âconomie vs Football", "√âv√©nements vs Football", "Football, √âconomie et √âv√©nements"]
    )

    # ---------------------------- √âconomie vs √âv√©nements ----------------------------
    if option == "√âconomie vs √âv√©nements":
        st.markdown("### Impact des √âv√©nements Culturels sur l'√âconomie")

        if 'events' in locals() and len(events) > 0:
            events['dates'] = pd.to_datetime(event['dates'])  # Assurer que les dates des √©v√©nements sont au format DateTime

            # Fusionner les donn√©es des √©v√©nements avec les donn√©es √©conomiques sur la base des dates
            econ_with_events = economy.merge(event[['dates', 'city']], left_on='date', right_on='dates', how='left')

            fig_event_impact = px.scatter(
                econ_with_events, 
                x="dates", 
                y="value", 
                color="city",
                title="Impact des √©v√©nements culturels sur les indicateurs √©conomiques"
            )
            st.plotly_chart(fig_event_impact)

    # ---------------------------- √âconomie vs Football ----------------------------
    elif option == "√âconomie vs Football":
        st.markdown("### Impact des Performances Sportives sur l'√âconomie")

       # Assuming 'economy' and 'football' DataFrames are already defined

        # Filtrage des donn√©es de football pour l'analyse des performances
        if 'football' in locals() and len(football) > 0:
            football['date'] = pd.to_datetime(football['date'])  # Assurer que les dates sont au format DateTime

            # Calculer l'impact des r√©sultats des matchs sur le PIB (ici bas√© sur la performance de l'√©quipe)
            football["economic_impact"] = football.apply(lambda x: 1 if x["performance_home_team"] == "winner" else -1, axis=1)

            # Convertir la colonne 'date' dans le DataFrame 'economy' au format datetime
            economy['date'] = pd.to_datetime(economy['date'])


            # Localiser les colonnes 'date' au fuseau horaire UTC
            economy['date'] = economy['date'].dt.tz_localize('UTC', ambiguous='NaT', nonexistent='shift_forward')
 
            # Convertir les colonnes 'date' au m√™me fuseau horaire
            economy['date'] = economy['date'].dt.tz_convert('UTC')
            football['date'] = football['date'].dt.tz_convert('UTC')

            # Agr√©ger les donn√©es √©conomiques en fonction des performances sportives (impact positif ou n√©gatif)
            econ_with_football = economy.merge(football[['date', 'economic_impact']], on='date', how='left')

            fig_impact = px.line(
                econ_with_football, 
                x="date", 
                y="value", 
                color="economic_impact", 
                title="Impact des r√©sultats sportifs sur les indicateurs √©conomiques"
            )
            st.plotly_chart(fig_impact)

    # ---------------------------- √âv√©nements vs Football ----------------------------
    elif option == "√âv√©nements vs Football":
        st.markdown("### Interaction entre les √©v√©nements culturels et les performances sportives")

        if 'football' in locals() and len(football) > 0 and 'events' in locals() and len(events) > 0:
            # Fusionner les donn√©es des √©v√©nements avec les donn√©es de football
            events['dates'] = pd.to_datetime(events['dates'])
            football['date'] = pd.to_datetime(football['date'])

            events_with_football = events.merge(football[['date', 'home_team', 'away_team']], left_on='dates', right_on='date', how='left')

            fig_event_football_impact = px.scatter(
                events_with_football,
                x="dates",
                y="home_team",  # Exemple d'affichage d'une √©quipe √† domicile par rapport √† la date de l'√©v√©nement
                color="away_team",
                title="Interaction entre √©v√©nements culturels et performances sportives"
            )
            st.plotly_chart(fig_event_football_impact)

    # ---------------------------- Football, √âconomie et √âv√©nements ----------------------------
    elif option == "Football, √âconomie et √âv√©nements":
        st.markdown("### Interaction combin√©e entre √âv√©nements, Football et √âconomie")

        if 'football' in locals() and len(football) > 0 and 'events' in locals() and len(events) > 0 and not economy.empty:
            # Fusionner les trois ensembles de donn√©es (football, √©v√©nements, √©conomie)
            events['dates'] = pd.to_datetime(events['dates'])
            football['date'] = pd.to_datetime(football['date'])

            # Fusionner les √©v√©nements et le football sur les dates
            events_with_football = events.merge(football[['date', 'home_team', 'away_team']], left_on='dates', right_on='date', how='left')

            # Fusionner le r√©sultat final avec les donn√©es √©conomiques
            final_data = events_with_football.merge(economy[['date', 'value']], left_on='dates', right_on='date', how='left')

            fig_combined_impact = px.line(
                final_data,
                x="dates",
                y="value",  # Indicateur √©conomique
                color="home_team",  # Par exemple, en fonction de l'√©quipe √† domicile
                line_dash="away_team",  # Utiliser l'√©quipe √† l'ext√©rieur comme ligne de s√©paration
                title="Interaction combin√©e entre √âv√©nements, Football et Indicateurs √âconomiques"
            )
            st.plotly_chart(fig_combined_impact)

    # ---------------------------- Pr√©visions √©conomiques bas√©es sur les √©v√©nements √† venir ----------------------------

    st.markdown("### Pr√©visions √©conomiques bas√©es sur les √©v√©nements futurs")
    if not economy.empty:
        # Filtrer les donn√©es √©conomiques
        
        economy = economy.dropna(subset=['value'])  # Supprimer les lignes avec des valeurs manquantes
        economy = economy[np.isfinite(economy['value'])]  # Garder seulement les valeurs finies

        economy['date'] = pd.to_datetime(economy['date'])
        economy['date_ordinal'] = economy['date'].apply(lambda x: x.toordinal())  # Convertir les dates en valeurs ordinales

        # Pr√©parer les donn√©es pour la r√©gression
        X = economy[['date_ordinal']]  # Donn√©es ind√©pendantes (dates)
        y = economy['value']  # Valeurs √† pr√©dire

                # V√©rifier et nettoyer les donn√©es
        if economy['value'].isnull().any() or not np.isfinite(economy['value']).all():
            raise ValueError("Les donn√©es contiennent des valeurs manquantes ou infinies.")
        

        # Normaliser les valeurs du PIB
        scaler = StandardScaler()
        y_normalized = scaler.fit_transform(y.values.reshape(-1, 1))

        # Entra√Æner le mod√®le de r√©gression lin√©aire
        model = LinearRegression()
        model.fit(X, y_normalized)

        # Pr√©dire les valeurs futures (par exemple, pour les 3 prochaines ann√©es)
        future_dates = pd.date_range(start=economy['date'].max(), periods=12, freq='M')  # Pr√©dire sur 12 mois
        future_dates_ordinal = future_dates.map(lambda x: x.toordinal()).values.reshape(-1, 1)
        predictions_normalized = model.predict(future_dates_ordinal)

        # Inverser la normalisation pour obtenir les valeurs pr√©dictives originales
        predictions = scaler.inverse_transform(predictions_normalized)

        # Affichage des pr√©visions
        prediction_df = pd.DataFrame({
            'Date': future_dates,
            'Pr√©diction du PIB': predictions.flatten()
        })

        fig_forecast = px.line(
            prediction_df, 
            x='Date', 
            y='Pr√©diction du PIB', 
            title="Pr√©visions √©conomiques bas√©es sur les √©v√©nements √† venir"
        )
        st.plotly_chart(fig_forecast)

    # ---------------------------- Synth√®se et Interaction des Donn√©es ----------------------------

    st.markdown("### Synth√®se des Interactions entre √âv√©nements, Sport et √âconomie")

    st.write("Analyse compl√®te de l'interaction entre l'√©conomie, les √©v√©nements culturels et sportifs.")
    st.write("Cette analyse permet de visualiser l'impact cumul√© de ces trois domaines sur les indicateurs √©conomiques.")
















from datetime import datetime

current_year = datetime.now().year

footer = f"""
<style>
footer {{
    position: fixed;
    bottom: 0;
    left: 0;
    width: 100%;
    background-color: #2E2E2E;
    text-align: center;
    padding: 2px;
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
    margin: 0;
}}
footer a {{
    color: #4CAF50;
    text-decoration: none;
    margin: 0 5px;
    font-size: 24px;
}}
footer a:hover {{
    text-decoration: underline;
}}
footer p {{
    margin: 5px;
    font-size: 14px; 
}}
footer .copyright {{
    font-size: 12px;
    color: #888;
}}
</style>
<footer>
    <p>
        <a href="https://www.linkedin.com/in/hamady-gackou-687216251" target="_blank">
            <i class="fa fa-linkedin"></i>
        </a>
        <a href="https://github.com/gackouhamady" target="_blank">
            <i class="fa fa-github"></i>
        </a>
    </p>
    <p class="copyright">&copy; {current_year} Hamady Gackou</p>
</footer>
"""

# Affichage du footer
st.markdown(footer, unsafe_allow_html=True)
